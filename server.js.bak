const express = require('express');
const http = require('http');
const { Server } = require('socket.io');
const { v4: uuidv4 } = require('uuid');

const app = express();
const server = http.createServer(app);
const io = new Server(server);

const PORT = 3000;
const races = {};

// Статическая папка
app.use(express.static('public'));


const texts = [
    "Лисичка вирішила покликати Журавля в гості. Зварила вона кашу з пшона, поклала її на тарілку та запросила: 'Приходь, Журавлику, на обід!'",
    "Кирило був дужий і відважний чоловік. Як почув про змія, то сказав: 'Треба йти й побороти зло, бо воно не дає людям жити спокійно.'",
    "Хуха-Моховинка жила в дуплі старого дуба. Вона була маленька, пухнаста та доброзичлива. Одного дня люди вирубали її дерево, і вона пішла шукати новий дім.",
    "Муха-Цокотуха знайшла гроші та вирішила влаштувати свято. Вона запросила всіх своїх друзів на бенкет, але раптом з'явився злий павук.",
    "На полі зацвів Соняшник. Його пелюстки розкрилися до сонця. Але одного разу Соняшник замислився: 'Чому я завжди тягнуся до світла?'",
    "Маленький дзвіночок жив у лісі. Він радів кожному вітерцю, який грався з його синіми пелюстками.",
    "Ворона знала, що сила не в гніві, а в мудрості. Коли інші птахи сперечалися, вона завжди знаходила правильне слово.",
    "Жила собі коза-Дереза, яка любила хитрувати. Її господарі вигнали за те, що вона обманювала всіх у дворі.",
    "Курочка знесла золоте яєчко. Дід бив – не розбив, баба била – не розбила. А мишка бігла, хвостиком зачепила, і яєчко впало й розбилося.",
    "Котик і Півник жили в одній хаті. Котик казав: 'Будь обережний, Півнику, не відчиняй двері Лисичці!'"
];

// Генерация текста для набора
function generateText() {
    const randomIndex = Math.floor(Math.random() * texts.length);
    return texts[randomIndex];
}


// События WebSocket
io.on('connection', (socket) => {
    console.log(`User connected: ${socket.id}`);

    // Пользователь создает гонку
    socket.on('createRace', () => {
        const raceId = getRandomInt(1000,10000)+'';
        races[raceId] = {
            id: raceId,
            players: [],
            text: generateText(),
        };
        socket.join(raceId);
        socket.emit('raceCreated', races[raceId]);
    });

    // Пользователь подключается к гонке
    socket.on('joinRace', (raceId, nickname) => {
        if (races[raceId]) {
            socket.join(raceId);
			races[raceId].players.push({ id: socket.id, nick: nickname, progress: 0 });
            io.in(raceId).emit('raceUpdated', races[raceId]);
        } else {
            socket.emit('error', 'Race not found');
        }
    });

    // Обновление прогресса игрока
    socket.on('updateProgress', ({ raceId, progress }) => {
		const race = races[raceId];
		console.log(io.of("/").adapter.rooms)
        if (race) {
            const player = race.players.find(p => p.id === socket.id);
            if (player) {
                player.progress = progress;
				if (progress>=100){
					if (!player.wintime){
						player.wintime = Date().split(" ")[4];
					}
				}
                io.in(raceId).emit('raceUpdated', race);
            }
        }
    });

    // Отключение пользователя
    socket.on('disconnect', () => {
        console.log(`User disconnected: ${socket.id}`);
        for (const raceId in races) {
            races[raceId].players = races[raceId].players.filter(p => p.id !== socket.id);
            io.in(raceId).emit('raceUpdated', races[raceId]);
        }
    });
});

server.listen(PORT, () => {
    console.log(`Server is running on http://localhost:${PORT}`);
});

function getRandomInt(min, max) {
  const minCeiled = Math.ceil(min);
  const maxFloored = Math.floor(max);
  return Math.floor(Math.random() * (maxFloored - minCeiled) + minCeiled); // The maximum is exclusive and the minimum is inclusive
}